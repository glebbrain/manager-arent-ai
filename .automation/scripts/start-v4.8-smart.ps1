# start-v4.8-smart.ps1 - –£–º–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å–∏—Å—Ç–µ–º—ã v4.8
# –° —É–º–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –ø–æ–ª–æ–º–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

param(
    [string]$SourcePath = "F:\ProjectsAI\ManagerAgentAI",
    [switch]$Force = $false,
    [switch]$Backup = $true,
    [switch]$Verbose = $false
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
$ErrorActionPreference = "Continue"
$ProgressPreference = "SilentlyContinue"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    Write-ColorOutput $logMessage
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function Backup-File {
    param(
        [string]$FilePath,
        [string]$BackupSuffix = "backup"
    )
    
    if (Test-Path $FilePath) {
        $BackupPath = "$FilePath.$BackupSuffix.$(Get-Date -Format 'yyyy-MM-dd-HH-mm-ss')"
        try {
            Copy-Item $FilePath $BackupPath -Force
            Write-ColorOutput "  üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $BackupPath" "Yellow"
            return $BackupPath
        } catch {
            Write-ColorOutput "  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: $($_.Exception.Message)" "Yellow"
            return $null
        }
    }
    return $null
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ —Å–ª–∏—è–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function Merge-Files {
    param(
        [string]$SourceFile,
        [string]$TargetFile,
        [string]$MergeType = "append"
    )
    
    if (!(Test-Path $SourceFile)) {
        Write-ColorOutput "  ‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $SourceFile" "Yellow"
        return $false
    }
    
    if (!(Test-Path $TargetFile)) {
        # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
        try {
            Copy-Item $SourceFile $TargetFile -Force
            Write-ColorOutput "  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $TargetFile" "Green"
            return $true
        } catch {
            Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $($_.Exception.Message)" "Red"
            return $false
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if ($Backup) {
        Backup-File $TargetFile "before-merge"
    }
    
    try {
        switch ($MergeType) {
            "append" {
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                $SourceContent = Get-Content $SourceFile -Raw
                $TargetContent = Get-Content $TargetFile -Raw
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
                if ($TargetContent -notlike "*$SourceContent*") {
                    Add-Content $TargetFile "`n`n# === –î–û–ë–ê–í–õ–ï–ù–û –ò–ó v4.8 ===" -Encoding UTF8
                    Add-Content $TargetFile $SourceContent -Encoding UTF8
                    Write-ColorOutput "  ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω (–¥–æ–±–∞–≤–ª–µ–Ω–æ): $TargetFile" "Green"
                } else {
                    Write-ColorOutput "  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è): $TargetFile" "Cyan"
                }
            }
            "prepend" {
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                $SourceContent = Get-Content $SourceFile -Raw
                $TargetContent = Get-Content $TargetFile -Raw
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
                if ($TargetContent -notlike "*$SourceContent*") {
                    $NewContent = "# === –î–û–ë–ê–í–õ–ï–ù–û –ò–ó v4.8 ===`n$SourceContent`n`n$TargetContent"
                    Set-Content $TargetFile $NewContent -Encoding UTF8
                    Write-ColorOutput "  ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω (–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–æ): $TargetFile" "Green"
                } else {
                    Write-ColorOutput "  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è): $TargetFile" "Cyan"
                }
            }
            "replace" {
                # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
                Copy-Item $SourceFile $TargetFile -Force
                Write-ColorOutput "  ‚úÖ –ó–∞–º–µ–Ω–µ–Ω: $TargetFile" "Green"
            }
        }
        return $true
    } catch {
        Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ —Å–ª–∏—è–Ω–∏—è: $($_.Exception.Message)" "Red"
        return $false
    }
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
Write-ColorOutput "üöÄ ========================================" "Cyan"
Write-ColorOutput "üöÄ  –£–ú–ù–´–ô –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ v4.8" "Cyan"
Write-ColorOutput "üöÄ ========================================" "Cyan"
Write-ColorOutput ""

Write-ColorOutput "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:" "Yellow"
Write-ColorOutput "  ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å: $SourcePath" "White"
Write-ColorOutput "  ‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: $Force" "White"
Write-ColorOutput "  ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $Backup" "White"
Write-ColorOutput "  ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ: $Verbose" "White"
Write-ColorOutput ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—É—Ç–∏
Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—É—Ç–∏..." "Yellow"
if (!(Test-Path $SourcePath)) {
    Write-ColorOutput "‚ùå –û–®–ò–ë–ö–ê: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: $SourcePath" "Red"
    exit 1
}
Write-ColorOutput "‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω: $SourcePath" "Green"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
Write-ColorOutput "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..." "Yellow"
if (!(Test-Path ".\.automation")) { 
    New-Item -ItemType Directory -Path ".\.automation" -Force | Out-Null
    Write-ColorOutput "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: .automation" "Green"
}
if (!(Test-Path ".\.manager")) { 
    New-Item -ItemType Directory -Path ".\.manager" -Force | Out-Null
    Write-ColorOutput "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: .manager" "Green"
}
if (!(Test-Path ".\.manager\control-files")) { 
    New-Item -ItemType Directory -Path ".\.manager\control-files" -Force | Out-Null
    Write-ColorOutput "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: .manager\control-files" "Green"
}

# ========================================
# –£–ú–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í
# ========================================

Write-ColorOutput "üìã –£–º–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..." "Yellow"

# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∫–æ–ø–∏—Ä—É–µ–º (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ª–æ–º–∞—Ç—å –ø—Ä–æ–µ–∫—Ç)
$ExcludeFiles = @(
    "TODO.md",
    "IDEA.md",
    "COMPLETED.md",
    "ERRORS.md",
    "README.md",
    "package.json",
    "package-lock.json",
    "yarn.lock",
    "node_modules",
    ".git",
    ".vs",
    "bin",
    "obj",
    "dist",
    "build"
)

# –§–∞–π–ª—ã –¥–ª—è —É–º–Ω–æ–≥–æ —Å–ª–∏—è–Ω–∏—è
$MergeFiles = @{
    ".manager\start.md" = "append"
    ".manager\control-files\INSTRUCTIONS.md" = "append"
    ".manager\control-files\TODO.md" = "append"
    ".manager\control-files\IDEA.md" = "append"
    ".manager\control-files\COMPLETED.md" = "append"
    ".manager\control-files\ERRORS.md" = "append"
}

# –§–∞–π–ª—ã –¥–ª—è –∑–∞–º–µ–Ω—ã (–µ—Å–ª–∏ Force)
$ReplaceFiles = @(
    "cursor.json",
    ".automation\scripts\New-Aliases-v4.8.ps1",
    ".automation\Project-Analysis-Optimizer-v4.8.ps1",
    ".automation\Quick-Access-Optimized-v4.8.ps1"
)

# 1. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .automation (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã)
Write-ColorOutput "  üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .automation..." "Yellow"
if (Test-Path "$SourcePath\.automation") {
    try {
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ .automation
        $AutomationFiles = Get-ChildItem "$SourcePath\.automation" -Recurse | Where-Object {
            $item = $_
            $shouldExclude = $false
            foreach ($pattern in $ExcludeFiles) {
                if ($item.Name -like $pattern -or $item.FullName -like "*\$pattern\*") {
                    $shouldExclude = $true
                    break
                }
            }
            return -not $shouldExclude
        }
        
        foreach ($file in $AutomationFiles) {
            $relativePath = $file.FullName.Substring($SourcePath.Length + 1)
            $targetPath = ".\$relativePath"
            $targetDir = Split-Path $targetPath -Parent
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (!(Test-Path $targetDir)) {
                New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
            }
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            Copy-Item $file.FullName $targetPath -Force
            Write-ColorOutput "    ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $relativePath" "Green"
        }
        
        Write-ColorOutput "  ‚úÖ .automation —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" "Green"
    } catch {
        Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è .automation: $($_.Exception.Message)" "Red"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  .automation –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—É—Ç–∏" "Yellow"
}

# 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .manager (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã)
Write-ColorOutput "  üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .manager..." "Yellow"
if (Test-Path "$SourcePath\.manager") {
    try {
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ .manager
        $ManagerFiles = Get-ChildItem "$SourcePath\.manager" -Recurse | Where-Object {
            $item = $_
            $shouldExclude = $false
            foreach ($pattern in $ExcludeFiles) {
                if ($item.Name -like $pattern -or $item.FullName -like "*\$pattern\*") {
                    $shouldExclude = $true
                    break
                }
            }
            return -not $shouldExclude
        }
        
        foreach ($file in $ManagerFiles) {
            $relativePath = $file.FullName.Substring($SourcePath.Length + 1)
            $targetPath = ".\$relativePath"
            $targetDir = Split-Path $targetPath -Parent
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (!(Test-Path $targetDir)) {
                New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
            }
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            Copy-Item $file.FullName $targetPath -Force
            Write-ColorOutput "    ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $relativePath" "Green"
        }
        
        Write-ColorOutput "  ‚úÖ .manager —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" "Green"
    } catch {
        Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è .manager: $($_.Exception.Message)" "Red"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  .manager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—É—Ç–∏" "Yellow"
}

# 3. –£–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
Write-ColorOutput "  üîÑ –£–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..." "Yellow"
foreach ($mergeFile in $MergeFiles.GetEnumerator()) {
    $sourceFile = "$SourcePath\$($mergeFile.Key)"
    $targetFile = ".\$($mergeFile.Key)"
    $mergeType = $mergeFile.Value
    
    Write-ColorOutput "    üîÑ –°–ª–∏—è–Ω–∏–µ: $($mergeFile.Key) ($mergeType)" "Cyan"
    Merge-Files $sourceFile $targetFile $mergeType
}

# 4. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã (–µ—Å–ª–∏ Force)
if ($Force) {
    Write-ColorOutput "  üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤..." "Yellow"
    foreach ($replaceFile in $ReplaceFiles) {
        $sourceFile = "$SourcePath\$replaceFile"
        $targetFile = ".\$replaceFile"
        
        if (Test-Path $sourceFile) {
            Write-ColorOutput "    üîÑ –ó–∞–º–µ–Ω–∞: $replaceFile" "Cyan"
            Merge-Files $sourceFile $targetFile "replace"
        }
    }
} else {
    Write-ColorOutput "  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force)" "Cyan"
}

# 5. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ cursor.json (–µ—Å–ª–∏ Force –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
Write-ColorOutput "  üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ cursor.json..." "Yellow"
if (Test-Path "$SourcePath\cursor.json") {
    if ($Force -or !(Test-Path ".\cursor.json")) {
        if ($Backup -and (Test-Path ".\cursor.json")) {
            Backup-File ".\cursor.json" "before-cursor-update"
        }
        Copy-Item "$SourcePath\cursor.json" "." -Force
        Write-ColorOutput "    ‚úÖ cursor.json –æ–±–Ω–æ–≤–ª–µ–Ω" "Green"
    } else {
        Write-ColorOutput "    ‚è≠Ô∏è  cursor.json —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –∑–∞–º–µ–Ω—ã)" "Cyan"
    }
} else {
    Write-ColorOutput "    ‚ö†Ô∏è  cursor.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—É—Ç–∏" "Yellow"
}

# ========================================
# –ó–ê–ì–†–£–ó–ö–ê –ê–õ–ò–ê–°–û–í –ò –ù–ê–°–¢–†–û–ô–ö–ê
# ========================================

Write-ColorOutput "üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–∏–∞—Å–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞..." "Yellow"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–∏–∞—Å–æ–≤
if (Test-Path ".\.automation\scripts\New-Aliases-v4.8.ps1") {
    try {
        . .\.automation\scripts\New-Aliases-v4.8.ps1
        Write-ColorOutput "  ‚úÖ –ê–ª–∏–∞—Å—ã v4.8 –∑–∞–≥—Ä—É–∂–µ–Ω—ã" "Green"
    } catch {
        Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–∏–∞—Å–æ–≤: $($_.Exception.Message)" "Red"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  –§–∞–π–ª –∞–ª–∏–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
if (Test-Path ".\.automation\Quick-Access-Optimized-v4.8.ps1") {
    try {
        Write-ColorOutput "  ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã..." "Cyan"
        pwsh -File .\.automation\Quick-Access-Optimized-v4.8.ps1 -Action setup
        Write-ColorOutput "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Green"
    } catch {
        Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: $($_.Exception.Message)" "Red"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
}

# ========================================
# –ê–ù–ê–õ–ò–ó –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
# ========================================

Write-ColorOutput "üîç –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è..." "Yellow"

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
if (Test-Path ".\.automation\Project-Analysis-Optimizer-v4.8.ps1") {
    try {
        Write-ColorOutput "  üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞..." "Cyan"
        pwsh -File .\.automation\Project-Analysis-Optimizer-v4.8.ps1 -Action analyze -AI -Quantum
        Write-ColorOutput "  ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω" "Green"
    } catch {
        Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: $($_.Exception.Message)" "Red"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
}

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
if (Test-Path ".\.automation\Project-Analysis-Optimizer-v4.8.ps1") {
    try {
        Write-ColorOutput "  ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è..." "Cyan"
        pwsh -File .\.automation\Project-Analysis-Optimizer-v4.8.ps1 -Action optimize -AI -Quantum
        Write-ColorOutput "  ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Green"
    } catch {
        Write-ColorOutput "  ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: $($_.Exception.Message)" "Red"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  –§–∞–π–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
}

# ========================================
# –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
# ========================================

Write-ColorOutput ""
Write-ColorOutput "üéâ ========================================" "Green"
Write-ColorOutput "üéâ  –£–ú–ù–´–ô –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ –ó–ê–í–ï–†–®–ï–ù!" "Green"
Write-ColorOutput "üéâ ========================================" "Green"
Write-ColorOutput ""

Write-ColorOutput "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:" "Cyan"
Write-ColorOutput "  ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫: ‚úÖ –°–æ–∑–¥–∞–Ω–∞" "White"
Write-ColorOutput "  ‚Ä¢ .automation: ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" "White"
Write-ColorOutput "  ‚Ä¢ .manager: ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" "White"
Write-ColorOutput "  ‚Ä¢ –£–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" "White"
Write-ColorOutput "  ‚Ä¢ –ê–ª–∏–∞—Å—ã: ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã" "White"
Write-ColorOutput "  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" "White"
Write-ColorOutput "  ‚Ä¢ –ê–Ω–∞–ª–∏–∑: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω" "White"
Write-ColorOutput "  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" "White"
Write-ColorOutput ""

Write-ColorOutput "üìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:" "Cyan"
Write-ColorOutput "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞" "White"
Write-ColorOutput "  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TODO.md –∏ IDEA.md –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã" "White"
Write-ColorOutput "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–∏—è–Ω–∏–µ .manager/start.md" "White"
Write-ColorOutput "  4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã: mpo, mmo, qai, qaq, qap" "White"
Write-ColorOutput ""

Write-ColorOutput "üéØ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å v4.8!" "Green"
Write-ColorOutput ""
