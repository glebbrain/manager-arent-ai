# start-v4.8-config.ps1 - –£–º–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç start-smart-config.json –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

param(
    [string]$SourcePath = "",
    [string]$ConfigFile = ".\start-smart-config.json",
    [switch]$Force = $false,
    [switch]$Backup = $true,
    [switch]$Verbose = $false,
    [switch]$DryRun = $false
)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Import-Module -Name ".\automation\config\SmartCopyConfig.psm1" -Force

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if ([string]::IsNullOrEmpty($SourcePath)) {
    $SourcePath = Get-SourcePath
    if ([string]::IsNullOrEmpty($SourcePath)) {
        Write-Host "‚ùå –û–®–ò–ë–ö–ê: SourcePath –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" -ForegroundColor Red
        exit 1
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
$ErrorActionPreference = "Continue"
$ProgressPreference = "SilentlyContinue"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    Write-ColorOutput $logMessage
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if ($Config.logging.enabled) {
        try {
            Add-Content -Path $Config.logging.file -Value $logMessage -Encoding UTF8
        } catch {
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function Load-Config {
    param([string]$ConfigPath)
    
    if (Test-Path $ConfigPath) {
        try {
            $config = Get-Content $ConfigPath -Raw | ConvertFrom-Json
            Write-ColorOutput "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $ConfigPath" "Green"
            return $config
        } catch {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $($_.Exception.Message)" "Red"
            return $null
        }
    } else {
        Write-ColorOutput "‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $ConfigPath" "Yellow"
        Write-ColorOutput "üí° –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..." "Cyan"
        return $null
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function Backup-File {
    param(
        [string]$FilePath,
        [string]$BackupSuffix = "backup"
    )
    
    if (!(Test-Path $FilePath)) { return $null }
    
    $timestamp = Get-Date -Format $Config.backupSettings.timestampFormat
    $BackupPath = "$FilePath.$BackupSuffix.$timestamp"
    
    try {
        Copy-Item $FilePath $BackupPath -Force
        Write-Log "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $BackupPath" "INFO"
        return $BackupPath
    } catch {
        Write-Log "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: $($_.Exception.Message)" "WARN"
        return $null
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ —Å–ª–∏—è–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function Merge-Files {
    param(
        [string]$SourceFile,
        [string]$TargetFile,
        [string]$MergeType = "append",
        [string]$Separator = "# === –î–û–ë–ê–í–õ–ï–ù–û –ò–ó v4.8 ==="
    )
    
    if (!(Test-Path $SourceFile)) {
        Write-Log "‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $SourceFile" "WARN"
        return $false
    }
    
    if (!(Test-Path $TargetFile)) {
        # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
        try {
            $targetDir = Split-Path $TargetFile -Parent
            if (!(Test-Path $targetDir)) {
                New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
            }
            Copy-Item $SourceFile $TargetFile -Force
            Write-Log "‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $TargetFile" "INFO"
            return $true
        } catch {
            Write-Log "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $($_.Exception.Message)" "ERROR"
            return $false
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if ($Config.backupSettings.enabled) {
        Backup-File $TargetFile $Config.backupSettings.suffix
    }
    
    try {
        $SourceContent = Get-Content $SourceFile -Raw -Encoding $Config.mergeSettings.encoding
        $TargetContent = Get-Content $TargetFile -Raw -Encoding $Config.mergeSettings.encoding
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if ($Config.mergeSettings.checkDuplicates -and $TargetContent -like "*$SourceContent*") {
            Write-Log "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è): $TargetFile" "INFO"
            return $true
        }
        
        switch ($MergeType) {
            "append" {
                $NewContent = $TargetContent
                if ($Config.mergeSettings.addSeparator) {
                    $NewContent += "`n`n$Separator`n"
                }
                $NewContent += $SourceContent
                Set-Content $TargetFile $NewContent -Encoding $Config.mergeSettings.encoding
                Write-Log "‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω (–¥–æ–±–∞–≤–ª–µ–Ω–æ): $TargetFile" "INFO"
            }
            "prepend" {
                $NewContent = ""
                if ($Config.mergeSettings.addSeparator) {
                    $NewContent = "$Separator`n"
                }
                $NewContent += $SourceContent
                if ($Config.mergeSettings.addSeparator) {
                    $NewContent += "`n"
                }
                $NewContent += $TargetContent
                Set-Content $TargetFile $NewContent -Encoding $Config.mergeSettings.encoding
                Write-Log "‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω (–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–æ): $TargetFile" "INFO"
            }
            "replace" {
                Copy-Item $SourceFile $TargetFile -Force
                Write-Log "‚úÖ –ó–∞–º–µ–Ω–µ–Ω: $TargetFile" "INFO"
            }
        }
        return $true
    } catch {
        Write-Log "‚ùå –û—à–∏–±–∫–∞ —Å–ª–∏—è–Ω–∏—è: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
function Should-ExcludeFile {
    param(
        [string]$FilePath,
        [array]$ExcludePatterns
    )
    
    foreach ($pattern in $ExcludePatterns) {
        if ($FilePath -like "*\$pattern" -or $FilePath -like "*\$pattern\*" -or $FilePath -like $pattern) {
            return $true
        }
    }
    return $false
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
Write-ColorOutput "üöÄ ========================================" "Cyan"
Write-ColorOutput "üöÄ  –£–ú–ù–´–ô –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ v4.8 (CONFIG)" "Cyan"
Write-ColorOutput "üöÄ ========================================" "Cyan"
Write-ColorOutput ""

Write-ColorOutput "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:" "Yellow"
Write-ColorOutput "  ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å: $SourcePath" "White"
Write-ColorOutput "  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $ConfigFile" "White"
Write-ColorOutput "  ‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: $Force" "White"
Write-ColorOutput "  ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $Backup" "White"
Write-ColorOutput "  ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ: $Verbose" "White"
Write-ColorOutput "  ‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: $DryRun" "White"
Write-ColorOutput ""

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Write-ColorOutput "üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." "Yellow"
$Config = Get-SmartCopyConfig
$ExcludeFiles = Get-ExcludeFiles
$MergeFiles = Get-MergeFiles
$ReplaceFiles = Get-ReplaceFiles
$BackupSettings = Get-BackupSettings
$MergeSettings = Get-MergeSettings

if ($Config -eq $null) {
    Write-ColorOutput "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é" "Red"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—É—Ç–∏
Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—É—Ç–∏..." "Yellow"
if (!(Test-Path $SourcePath)) {
    Write-ColorOutput "‚ùå –û–®–ò–ë–ö–ê: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: $SourcePath" "Red"
    exit 1
}
Write-ColorOutput "‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω: $SourcePath" "Green"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
Write-ColorOutput "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..." "Yellow"
if (!(Test-Path ".\.automation")) { 
    New-Item -ItemType Directory -Path ".\.automation" -Force | Out-Null
    Write-ColorOutput "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: .automation" "Green"
}
if (!(Test-Path ".\.manager")) { 
    New-Item -ItemType Directory -Path ".\.manager" -Force | Out-Null
    Write-ColorOutput "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: .manager" "Green"
}
if (!(Test-Path ".\.manager\control-files")) { 
    New-Item -ItemType Directory -Path ".\.manager\control-files" -Force | Out-Null
    Write-ColorOutput "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: .manager\control-files" "Green"
}

# ========================================
# –£–ú–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í
# ========================================

Write-ColorOutput "üìã –£–º–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..." "Yellow"

# 1. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .automation (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã)
Write-ColorOutput "  üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .automation..." "Yellow"
if (Test-Path "$SourcePath\.automation") {
    try {
        $AutomationFiles = Get-ChildItem "$SourcePath\.automation" -Recurse | Where-Object {
            $relativePath = $_.FullName.Substring($SourcePath.Length + 1)
            return -not (Should-ExcludeFile $relativePath $ExcludeFiles)
        }
        
        foreach ($file in $AutomationFiles) {
            $relativePath = $file.FullName.Substring($SourcePath.Length + 1)
            $targetPath = ".\$relativePath"
            $targetDir = Split-Path $targetPath -Parent
            
            if ($DryRun) {
                Write-ColorOutput "    [DRY RUN] –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: $relativePath" "Cyan"
            } else {
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (!(Test-Path $targetDir)) {
                    New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
                }
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                Copy-Item $file.FullName $targetPath -Force
                Write-ColorOutput "    ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $relativePath" "Green"
            }
        }
        
        Write-ColorOutput "  ‚úÖ .automation —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" "Green"
    } catch {
        Write-Log "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è .automation: $($_.Exception.Message)" "ERROR"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  .automation –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—É—Ç–∏" "Yellow"
}

# 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .manager (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã)
Write-ColorOutput "  üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .manager..." "Yellow"
if (Test-Path "$SourcePath\.manager") {
    try {
        $ManagerFiles = Get-ChildItem "$SourcePath\.manager" -Recurse | Where-Object {
            $relativePath = $_.FullName.Substring($SourcePath.Length + 1)
            return -not (Should-ExcludeFile $relativePath $ExcludeFiles)
        }
        
        foreach ($file in $ManagerFiles) {
            $relativePath = $file.FullName.Substring($SourcePath.Length + 1)
            $targetPath = ".\$relativePath"
            $targetDir = Split-Path $targetPath -Parent
            
            if ($DryRun) {
                Write-ColorOutput "    [DRY RUN] –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: $relativePath" "Cyan"
            } else {
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (!(Test-Path $targetDir)) {
                    New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
                }
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                Copy-Item $file.FullName $targetPath -Force
                Write-ColorOutput "    ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $relativePath" "Green"
            }
        }
        
        Write-ColorOutput "  ‚úÖ .manager —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" "Green"
    } catch {
        Write-Log "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è .manager: $($_.Exception.Message)" "ERROR"
    }
} else {
    Write-ColorOutput "  ‚ö†Ô∏è  .manager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—É—Ç–∏" "Yellow"
}

# 3. –£–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
Write-ColorOutput "  üîÑ –£–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..." "Yellow"
foreach ($mergeFile in $MergeFiles.PSObject.Properties) {
    $sourceFile = "$SourcePath\$($mergeFile.Name)"
    $targetFile = ".\$($mergeFile.Name)"
    $mergeConfig = $mergeFile.Value
    
    if ($mergeConfig.enabled) {
        if ($DryRun) {
            Write-ColorOutput "    [DRY RUN] –°–ª–∏—è–Ω–∏–µ: $($mergeFile.Name) ($($mergeConfig.type))" "Cyan"
        } else {
            Write-ColorOutput "    üîÑ –°–ª–∏—è–Ω–∏–µ: $($mergeFile.Name) ($($mergeConfig.type))" "Cyan"
            Merge-Files $sourceFile $targetFile $mergeConfig.type $mergeConfig.separator
        }
    }
}

# 4. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã (–µ—Å–ª–∏ Force)
if ($Force) {
    Write-ColorOutput "  üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤..." "Yellow"
    foreach ($replaceFile in $ReplaceFiles.PSObject.Properties) {
        $sourceFile = "$SourcePath\$($replaceFile.Name)"
        $targetFile = ".\$($replaceFile.Name)"
        $replaceConfig = $replaceFile.Value
        
        if ($replaceConfig.enabled -and (Test-Path $sourceFile)) {
            if ($DryRun) {
                Write-ColorOutput "    [DRY RUN] –ó–∞–º–µ–Ω–∞: $($replaceFile.Name)" "Cyan"
            } else {
                Write-ColorOutput "    üîÑ –ó–∞–º–µ–Ω–∞: $($replaceFile.Name)" "Cyan"
                Merge-Files $sourceFile $targetFile "replace"
            }
        }
    }
} else {
    Write-ColorOutput "  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force)" "Cyan"
}

# 5. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ cursor.json (–µ—Å–ª–∏ Force –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
Write-ColorOutput "  üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ cursor.json..." "Yellow"
if (Test-Path "$SourcePath\cursor.json") {
    if ($Force -or !(Test-Path ".\cursor.json")) {
        if ($DryRun) {
            Write-ColorOutput "    [DRY RUN] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cursor.json" "Cyan"
        } else {
            if ($Config.backupSettings.enabled -and (Test-Path ".\cursor.json")) {
                Backup-File ".\cursor.json" "before-cursor-update"
            }
            Copy-Item "$SourcePath\cursor.json" "." -Force
            Write-ColorOutput "    ‚úÖ cursor.json –æ–±–Ω–æ–≤–ª–µ–Ω" "Green"
        }
    } else {
        Write-ColorOutput "    ‚è≠Ô∏è  cursor.json —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –∑–∞–º–µ–Ω—ã)" "Cyan"
    }
} else {
    Write-ColorOutput "    ‚ö†Ô∏è  cursor.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—É—Ç–∏" "Yellow"
}

# ========================================
# –ó–ê–ì–†–£–ó–ö–ê –ê–õ–ò–ê–°–û–í –ò –ù–ê–°–¢–†–û–ô–ö–ê
# ========================================

if (-not $DryRun) {
    Write-ColorOutput "üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–∏–∞—Å–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞..." "Yellow"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–∏–∞—Å–æ–≤
    if (Test-Path ".\.automation\scripts\New-Aliases-v4.8.ps1") {
        try {
            . .\.automation\scripts\New-Aliases-v4.8.ps1
            Write-ColorOutput "  ‚úÖ –ê–ª–∏–∞—Å—ã v4.8 –∑–∞–≥—Ä—É–∂–µ–Ω—ã" "Green"
        } catch {
            Write-Log "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–∏–∞—Å–æ–≤: $($_.Exception.Message)" "ERROR"
        }
    } else {
        Write-ColorOutput "  ‚ö†Ô∏è  –§–∞–π–ª –∞–ª–∏–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if (Test-Path ".\.automation\Quick-Access-Optimized-v4.8.ps1") {
        try {
            Write-ColorOutput "  ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã..." "Cyan"
            pwsh -File .\.automation\Quick-Access-Optimized-v4.8.ps1 -Action setup
            Write-ColorOutput "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Green"
        } catch {
            Write-Log "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: $($_.Exception.Message)" "ERROR"
        }
    } else {
        Write-ColorOutput "  ‚ö†Ô∏è  –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
    }
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    Write-ColorOutput "üîç –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è..." "Yellow"
    
    if (Test-Path ".\.automation\Project-Analysis-Optimizer-v4.8.ps1") {
        try {
            Write-ColorOutput "  üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞..." "Cyan"
            pwsh -File .\.automation\Project-Analysis-Optimizer-v4.8.ps1 -Action analyze -AI -Quantum
            Write-ColorOutput "  ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω" "Green"
        } catch {
            Write-Log "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: $($_.Exception.Message)" "ERROR"
        }
        
        try {
            Write-ColorOutput "  ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è..." "Cyan"
            pwsh -File .\.automation\Project-Analysis-Optimizer-v4.8.ps1 -Action optimize -AI -Quantum
            Write-ColorOutput "  ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Green"
        } catch {
            Write-Log "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: $($_.Exception.Message)" "ERROR"
        }
    } else {
        Write-ColorOutput "  ‚ö†Ô∏è  –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
    }
}

# ========================================
# –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
# ========================================

Write-ColorOutput ""
Write-ColorOutput "üéâ ========================================" "Green"
Write-ColorOutput "üéâ  –£–ú–ù–´–ô –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ –ó–ê–í–ï–†–®–ï–ù!" "Green"
Write-ColorOutput "üéâ ========================================" "Green"
Write-ColorOutput ""

Write-ColorOutput "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:" "Cyan"
Write-ColorOutput "  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞" "White"
Write-ColorOutput "  ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫: ‚úÖ –°–æ–∑–¥–∞–Ω–∞" "White"
Write-ColorOutput "  ‚Ä¢ .automation: ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" "White"
Write-ColorOutput "  ‚Ä¢ .manager: ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" "White"
Write-ColorOutput "  ‚Ä¢ –£–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" "White"
if (-not $DryRun) {
    Write-ColorOutput "  ‚Ä¢ –ê–ª–∏–∞—Å—ã: ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã" "White"
    Write-ColorOutput "  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" "White"
    Write-ColorOutput "  ‚Ä¢ –ê–Ω–∞–ª–∏–∑: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω" "White"
    Write-ColorOutput "  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" "White"
}
Write-ColorOutput ""

Write-ColorOutput "üìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:" "Cyan"
Write-ColorOutput "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞" "White"
Write-ColorOutput "  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TODO.md –∏ IDEA.md –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã" "White"
Write-ColorOutput "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–∏—è–Ω–∏–µ .manager/start.md" "White"
Write-ColorOutput "  4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã: mpo, mmo, qai, qaq, qap" "White"
Write-ColorOutput ""

if ($DryRun) {
    Write-ColorOutput "üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã" "Yellow"
    Write-ColorOutput "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ -DryRun –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π" "Cyan"
} else {
    Write-ColorOutput "üéØ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å v4.8!" "Green"
}

Write-ColorOutput ""
