# .automation/security/security_check.ps1
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞

param(
    [string]$OutputDir = "security-reports",
    [switch]$Fix = $false,
    [switch]$Verbose = $false
)

Write-Host "üîí –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Cyan

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
if (!(Test-Path $OutputDir)) {
    New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
}

$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$issues = @()
$criticalIssues = 0
$warningIssues = 0

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –≤ TODO.md
function Add-ToTodo {
    param(
        [string]$Issue,
        [string]$Severity = "warning"
    )
    
    $todoFile = "TODO.md"
    $marker = if ($Severity -eq "critical") { "üî¥" } else { "üü†" }
    $todoEntry = "- [ ] $marker $Issue"
    
    if (Test-Path $todoFile) {
        $content = Get-Content $todoFile -Raw
        if ($content -notlike "*$Issue*") {
            Add-Content -Path $todoFile -Value "`n$todoEntry"
        }
    } else {
        $todoEntry | Out-File -FilePath $todoFile -Encoding UTF8
    }
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤
Write-Host "`nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤..." -ForegroundColor Yellow

$secretPatterns = @(
    "password\s*=\s*['""][^'""]+['""]",
    "api[_-]?key\s*=\s*['""][^'""]+['""]",
    "secret\s*=\s*['""][^'""]+['""]",
    "token\s*=\s*['""][^'""]+['""]",
    "private[_-]?key\s*=\s*['""][^'""]+['""]",
    "access[_-]?key\s*=\s*['""][^'""]+['""]",
    "aws[_-]?secret",
    "github[_-]?token",
    "slack[_-]?token",
    "discord[_-]?token"
)

$codeFiles = Get-ChildItem -Path "." -Include "*.py", "*.js", "*.ts", "*.cs", "*.php", "*.java", "*.go", "*.rs" -Recurse -File | 
    Where-Object { $_.DirectoryName -notlike "*node_modules*" -and $_.DirectoryName -notlike "*\.git*" }

foreach ($file in $codeFiles) {
    $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
    if ($content) {
        foreach ($pattern in $secretPatterns) {
            if ($content -match $pattern) {
                $issue = "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –≤ $($file.FullName): $($matches[0])"
                $issues += $issue
                $criticalIssues++
                Add-ToTodo -Issue $issue -Severity "critical"
                Write-Host "  ‚ùå $issue" -ForegroundColor Red
            }
        }
    }
}

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Node.js)
Write-Host "`nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js..." -ForegroundColor Yellow

if (Test-Path "package.json") {
    try {
        $auditResult = npm audit --json 2>$null | ConvertFrom-Json
        if ($auditResult.vulnerabilities) {
            foreach ($vuln in $auditResult.vulnerabilities.PSObject.Properties) {
                $vulnData = $vuln.Value
                $issue = "–£—è–∑–≤–∏–º–æ—Å—Ç—å –≤ –ø–∞–∫–µ—Ç–µ $($vuln.Name): $($vulnData.title) (Severity: $($vulnData.severity))"
                $issues += $issue
                
                if ($vulnData.severity -in @("high", "critical")) {
                    $criticalIssues++
                    Add-ToTodo -Issue $issue -Severity "critical"
                    Write-Host "  ‚ùå $issue" -ForegroundColor Red
                } else {
                    $warningIssues++
                    Add-ToTodo -Issue $issue -Severity "warning"
                    Write-Host "  ‚ö†Ô∏è $issue" -ForegroundColor Yellow
                }
            }
            
            if ($Fix) {
                Write-Host "  üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..." -ForegroundColor Cyan
                npm audit fix --force
            }
        } else {
            Write-Host "  ‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" -ForegroundColor Green
        }
    }
    catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å npm audit: $($_.Exception.Message)"
    }
}

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Python)
Write-Host "`nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python..." -ForegroundColor Yellow

if (Test-Path "requirements.txt") {
    try {
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ safety (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        $safetyResult = safety check --json 2>$null | ConvertFrom-Json
        if ($safetyResult) {
            foreach ($vuln in $safetyResult) {
                $issue = "–£—è–∑–≤–∏–º–æ—Å—Ç—å –≤ –ø–∞–∫–µ—Ç–µ $($vuln.package): $($vuln.advisory) (Severity: $($vuln.severity))"
                $issues += $issue
                $criticalIssues++
                Add-ToTodo -Issue $issue -Severity "critical"
                Write-Host "  ‚ùå $issue" -ForegroundColor Red
            }
        } else {
            Write-Host "  ‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" -ForegroundColor Green
        }
    }
    catch {
        Write-Warning "Safety –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install safety"
    }
}

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Write-Host "`n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." -ForegroundColor Yellow

$configFiles = Get-ChildItem -Path "." -Include "*.json", "*.yaml", "*.yml", "*.conf", "*.config" -Recurse -File |
    Where-Object { $_.DirectoryName -notlike "*node_modules*" -and $_.DirectoryName -notlike "*\.git*" }

foreach ($file in $configFiles) {
    $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
    if ($content) {
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ –ø–∞—Ä–æ–ª–µ–π
        if ($content -match "password\s*:\s*['""][^'""]+['""]") {
            $issue = "–•–∞—Ä–¥–∫–æ–¥ –ø–∞—Ä–æ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $($file.FullName)"
            $issues += $issue
            $criticalIssues++
            Add-ToTodo -Issue $issue -Severity "critical"
            Write-Host "  ‚ùå $issue" -ForegroundColor Red
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if ($content -match "debug\s*:\s*true") {
            $issue = "–í–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω: $($file.FullName)"
            $issues += $issue
            $warningIssues++
            Add-ToTodo -Issue $issue -Severity "warning"
            Write-Host "  ‚ö†Ô∏è $issue" -ForegroundColor Yellow
        }
    }
}

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
Write-Host "`nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..." -ForegroundColor Yellow

$sensitiveFiles = Get-ChildItem -Path "." -Include "*.key", "*.pem", "*.p12", "*.pfx", "*.crt", "*.cer" -Recurse -File
foreach ($file in $sensitiveFiles) {
    $acl = Get-Acl $file.FullName
    $hasRestrictivePermissions = $false
    
    foreach ($access in $acl.Access) {
        if ($access.FileSystemRights -like "*FullControl*" -and $access.IdentityReference -like "*Everyone*") {
            $hasRestrictivePermissions = $true
            break
        }
    }
    
    if ($hasRestrictivePermissions) {
        $issue = "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: $($file.FullName)"
        $issues += $issue
        $criticalIssues++
        Add-ToTodo -Issue $issue -Severity "critical"
        Write-Host "  ‚ùå $issue" -ForegroundColor Red
    }
}

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
Write-Host "`nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore..." -ForegroundColor Yellow

if (Test-Path ".gitignore") {
    $gitignoreContent = Get-Content ".gitignore" -Raw
    $requiredIgnores = @("*.log", "*.env", "*.key", "*.pem", "node_modules/", "__pycache__/", ".venv/")
    
    foreach ($ignore in $requiredIgnores) {
        if ($gitignoreContent -notlike "*$ignore*") {
            $issue = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .gitignore: $ignore"
            $issues += $issue
            $warningIssues++
            Add-ToTodo -Issue $issue -Severity "warning"
            Write-Host "  ‚ö†Ô∏è $issue" -ForegroundColor Yellow
        }
    }
} else {
    $issue = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .gitignore"
    $issues += $issue
    $criticalIssues++
    Add-ToTodo -Issue $issue -Severity "critical"
    Write-Host "  ‚ùå $issue" -ForegroundColor Red
}

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
$reportPath = Join-Path $OutputDir "security_report_$timestamp.json"
$report = @{
    timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    criticalIssues = $criticalIssues
    warningIssues = $warningIssues
    totalIssues = $issues.Count
    issues = $issues
    summary = @{
        status = if ($criticalIssues -gt 0) { "FAILED" } elseif ($warningIssues -gt 0) { "WARNING" } else { "PASSED" }
        message = if ($criticalIssues -gt 0) { "–ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" } 
                 elseif ($warningIssues -gt 0) { "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" } 
                 else { "–ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" }
    }
}

$report | ConvertTo-Json -Depth 10 | Out-File -FilePath $reportPath -Encoding UTF8

# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
Write-Host "`nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan
Write-Host "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: $criticalIssues" -ForegroundColor $(if ($criticalIssues -gt 0) { "Red" } else { "Green" })
Write-Host "üü† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $warningIssues" -ForegroundColor $(if ($warningIssues -gt 0) { "Yellow" } else { "Green" })
Write-Host "üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $reportPath" -ForegroundColor Cyan

if ($criticalIssues -gt 0) {
    Write-Host "`n‚ùå –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê!" -ForegroundColor Red
    Write-Host "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º." -ForegroundColor Red
    exit 1
} elseif ($warningIssues -gt 0) {
    Write-Host "`n‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò" -ForegroundColor Yellow
    Write-Host "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º." -ForegroundColor Yellow
} else {
    Write-Host "`n‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!" -ForegroundColor Green
    Write-Host "–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é." -ForegroundColor Green
}

Write-Host "`nüìã –ü—Ä–æ–±–ª–µ–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ TODO.md –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è" -ForegroundColor Cyan