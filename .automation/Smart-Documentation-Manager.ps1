# ðŸ“š Smart Documentation Manager v2.8.0
# PowerShell script for managing the Smart Documentation service.
# Version: 2.8.0
# Last Updated: 2025-02-01

param(
    [Parameter(Mandatory=$false)]
    [string]$Action = "status", # Possible actions: status, start, stop, restart, deploy, get-config, generate-doc, get-documents, get-analytics
    
    [Parameter(Mandatory=$false)]
    [string]$Type = "api", # Document type for generation
    
    [Parameter(Mandatory=$false)]
    [string]$Format = "markdown", # Document format
    
    [Parameter(Mandatory=$false)]
    [string]$Title = "Sample Documentation", # Document title
    
    [Parameter(Mandatory=$false)]
    [string]$Description = "Sample documentation generated by AI", # Document description
    
    [Parameter(Mandatory=$false)]
    [string]$SourceCode = "function add(a, b) { return a + b; }", # Source code to document
    
    [Parameter(Mandatory=$false)]
    [string]$ServiceUrl = "http://localhost:3027",
    
    [Parameter(Mandatory=$false)]
    [switch]$Verbose
)

$ErrorActionPreference = "Stop"

Write-Host "ðŸ“š Smart Documentation Manager v2.8.0" -ForegroundColor Cyan
Write-Host "ðŸ“… Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Gray

function Invoke-HttpRequest {
    param(
        [string]$Uri,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        $Body = $null
    )
    
    $params = @{
        Uri = $Uri
        Method = $Method
        Headers = $Headers
        ContentType = "application/json"
    }
    
    if ($Body) {
        $params.Body = ($Body | ConvertTo-Json -Depth 10)
    }
    
    try {
        $response = Invoke-RestMethod @params
        return $response
    } catch {
        Write-Error "HTTP Request failed: $($_.Exception.Message)"
        return $null
    }
}

function Get-ServiceStatus {
    Write-Host "Checking service status at $ServiceUrl/health..." -ForegroundColor Yellow
    $response = Invoke-HttpRequest -Uri "$ServiceUrl/health"
    if ($response) {
        Write-Host "Service Status: $($response.status)" -ForegroundColor Green
        Write-Host "Version: $($response.version)" -ForegroundColor Green
        Write-Host "Features: $($response.features.Count) enabled" -ForegroundColor Green
        Write-Host "Documents: $($response.documents)" -ForegroundColor Green
        Write-Host "Templates: $($response.templates)" -ForegroundColor Green
        Write-Host "Versions: $($response.versions)" -ForegroundColor Green
    } else {
        Write-Host "Service is not reachable or returned an error." -ForegroundColor Red
    }
}

function Get-ServiceConfig {
    Write-Host "Retrieving Smart Documentation configuration from $ServiceUrl/api/config..." -ForegroundColor Yellow
    $response = Invoke-HttpRequest -Uri "$ServiceUrl/api/config"
    if ($response) {
        Write-Host "Configuration:" -ForegroundColor Green
        $response | ConvertTo-Json -Depth 5 | Write-Host
    } else {
        Write-Host "Failed to retrieve service config." -ForegroundColor Red
    }
}

function Generate-Document {
    param(
        [string]$DocType,
        [string]$DocFormat,
        [string]$DocTitle,
        [string]$DocDescription,
        [string]$Code
    )
    Write-Host "Generating $DocType documentation in $DocFormat format..." -ForegroundColor Yellow
    Write-Host "Title: $DocTitle" -ForegroundColor Yellow
    Write-Host "Description: $DocDescription" -ForegroundColor Yellow
    
    $body = @{
        type = $DocType
        format = $DocFormat
        sourceCode = $Code
        requirements = @{
            title = $DocTitle
            description = $DocDescription
            license = "MIT"
        }
    }
    
    $response = Invoke-HttpRequest -Uri "$ServiceUrl/api/generate" -Method "POST" -Body $body
    if ($response) {
        Write-Host "Document Generation Result:" -ForegroundColor Green
        Write-Host "Success: $($response.success)" -ForegroundColor Green
        Write-Host "Document ID: $($response.document.id)" -ForegroundColor Green
        Write-Host "Quality: $($response.document.quality)" -ForegroundColor Green
        Write-Host "Readability: $($response.document.readability)" -ForegroundColor Green
        Write-Host "Completeness: $($response.document.completeness)" -ForegroundColor Green
        Write-Host "Processing Time: $($response.metadata.processingTime)ms" -ForegroundColor Green
        Write-Host "Word Count: $($response.document.document.metadata.wordCount)" -ForegroundColor Yellow
        Write-Host "Sections: $($response.document.document.metadata.sectionCount)" -ForegroundColor Yellow
        Write-Host "Code Blocks: $($response.document.document.metadata.codeBlocks)" -ForegroundColor Yellow
        Write-Host "Generated Document Preview:" -ForegroundColor Cyan
        $response.document.document.content.Substring(0, [Math]::Min(500, $response.document.document.content.Length)) | Write-Host
        if ($response.document.document.insights.Count -gt 0) {
            Write-Host "AI Insights:" -ForegroundColor Magenta
            $response.document.document.insights | ForEach-Object {
                Write-Host "  - $($_.message) (Confidence: $($_.confidence))" -ForegroundColor Yellow
            }
        }
    } else {
        Write-Host "Document generation failed." -ForegroundColor Red
    }
}

function Get-Documents {
    Write-Host "Retrieving generated documents..." -ForegroundColor Yellow
    $response = Invoke-HttpRequest -Uri "$ServiceUrl/api/documents"
    if ($response) {
        Write-Host "Documents (Total: $($response.total)):" -ForegroundColor Green
        $response.documents | ForEach-Object {
            Write-Host "  ID: $($_.id)" -ForegroundColor White
            Write-Host "  Type: $($_.type)" -ForegroundColor White
            Write-Host "  Format: $($_.format)" -ForegroundColor White
            Write-Host "  Quality: $($_.quality)" -ForegroundColor White
            Write-Host "  Readability: $($_.readability)" -ForegroundColor White
            Write-Host "  Completeness: $($_.completeness)" -ForegroundColor White
            Write-Host "  Created: $($_.createdAt)" -ForegroundColor White
            Write-Host "  ---" -ForegroundColor Gray
        }
    } else {
        Write-Host "Failed to retrieve documents." -ForegroundColor Red
    }
}

function Get-Analytics {
    Write-Host "Retrieving documentation analytics..." -ForegroundColor Yellow
    $response = Invoke-HttpRequest -Uri "$ServiceUrl/api/analytics"
    if ($response) {
        Write-Host "Documentation Analytics:" -ForegroundColor Green
        Write-Host "  Total Documents: $($response.analytics.totalDocuments)" -ForegroundColor White
        Write-Host "  Total Generations: $($response.analytics.totalGenerations)" -ForegroundColor White
        Write-Host "  Average Quality: $([math]::Round($response.analytics.averageQuality, 3))" -ForegroundColor White
        Write-Host "  Popular Templates: $($response.analytics.popularTemplates.Count)" -ForegroundColor White
        Write-Host "  Language Distribution: $($response.analytics.languageDistribution.Count) languages" -ForegroundColor White
        Write-Host "  Format Distribution: $($response.analytics.formatDistribution.Count) formats" -ForegroundColor White
    } else {
        Write-Host "Failed to retrieve analytics." -ForegroundColor Red
    }
}

switch ($Action) {
    "status" {
        Get-ServiceStatus
    }
    "start" {
        Write-Host "Starting Smart Documentation service (manual action required for actual process start)..." -ForegroundColor Yellow
        Write-Host "Please navigate to 'smart-documentation' directory and run 'npm start' or 'npm run dev'." -ForegroundColor DarkYellow
    }
    "stop" {
        Write-Host "Stopping Smart Documentation service (manual action required for actual process stop)..." -ForegroundColor Yellow
        Write-Host "Please manually stop the running Node.js process." -ForegroundColor DarkYellow
    }
    "restart" {
        Write-Host "Restarting Smart Documentation service (manual action required)..." -ForegroundColor Yellow
        Write-Host "Please manually stop and then start the running Node.js process." -ForegroundColor DarkYellow
    }
    "deploy" {
        Write-Host "Deployment of Smart Documentation service (placeholder - implement actual deployment logic)..." -ForegroundColor Yellow
        Write-Host "This would typically involve Docker/Kubernetes deployment scripts." -ForegroundColor DarkYellow
    }
    "get-config" {
        Get-ServiceConfig
    }
    "generate-doc" {
        Generate-Document -DocType $Type -DocFormat $Format -DocTitle $Title -DocDescription $Description -Code $SourceCode
    }
    "get-documents" {
        Get-Documents
    }
    "get-analytics" {
        Get-Analytics
    }
    default {
        Write-Host "Invalid action specified. Supported actions: status, start, stop, restart, deploy, get-config, generate-doc, get-documents, get-analytics." -ForegroundColor Red
    }
}

Write-Host "ðŸ“š Smart Documentation Manager finished." -ForegroundColor Cyan
