# =============================================================================
# Task Migration Script - Universal Project Manager
# =============================================================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ TODO.md –≤ Completed.md
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ —Ñ–∞–π–ª—ã –≤ .manager/control-files/
# =============================================================================

param(
    [string]$ProjectPath = ".",
    [switch]$Verbose = $false,
    [switch]$DryRun = $false
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
$LogFile = Join-Path $ProjectPath "task-migration.log"
$ErrorActionPreference = "Continue"

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogEntry = "[$Timestamp] [$Level] $Message"
    Write-Host $LogEntry
    Add-Content -Path $LogFile -Value $LogEntry -Encoding UTF8
}

function Test-FileExists {
    param([string]$FilePath)
    return Test-Path $FilePath
}

function Get-CompletedTasks {
    param([string]$TodoContent)
    
    $completedTasks = @()
    $lines = $TodoContent -split "`n"
    $inCompletedBlock = $false
    $currentBlock = @()
    
    for ($i = 0; $i -lt $lines.Length; $i++) {
        $line = $lines[$i]
        
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if ($line -match "^\s*-\s*.*COMPLETED TASKS MOVED TO COMPLETED\.md\*\*") {
            $inCompletedBlock = $true
            $currentBlock = @()
            continue
        }
        
        # –ï—Å–ª–∏ –º—ã –≤ –±–ª–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if ($inCompletedBlock) {
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –±–ª–æ–∫
            if ($line -match "^\s*####\s+|^\s*---|^\s*#\s+") {
                $inCompletedBlock = $false
                if ($currentBlock.Count -gt 0) {
                    $completedTasks += ($currentBlock -join "`n")
                    $currentBlock = @()
                }
                continue
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
            if ($line -match "^\s{2,}-") {
                $currentBlock += $line.Trim()
            }
        }
        
        # –ò—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (‚úÖ –∏–ª–∏ [x])
        if ($line -match "^\s*-\s*[‚úÖx]\s+(.+)$" -and -not $inCompletedBlock) {
            $taskText = $matches[1].Trim()
            
            # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
            $fullTask = $taskText
            $j = $i + 1
            while ($j -lt $lines.Length -and $lines[$j] -match "^\s{2,}-") {
                $fullTask += "`n" + $lines[$j].Trim()
                $j++
            }
            
            $completedTasks += $fullTask
        }
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if ($inCompletedBlock -and $currentBlock.Count -gt 0) {
        $completedTasks += ($currentBlock -join "`n")
    }
    
    return $completedTasks
}

function Remove-CompletedTasks {
    param([string]$TodoContent)
    
    $lines = $TodoContent -split "`n"
    $newLines = @()
    $skipNext = $false
    $inCompletedBlock = $false
    
    for ($i = 0; $i -lt $lines.Length; $i++) {
        $line = $lines[$i]
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if ($line -match "^\s*-\s*.*COMPLETED TASKS MOVED TO COMPLETED\.md\*\*") {
            $inCompletedBlock = $true
            continue
        }
        
        # –ï—Å–ª–∏ –º—ã –≤ –±–ª–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if ($inCompletedBlock) {
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –±–ª–æ–∫
            if ($line -match "^\s*####\s+|^\s*---|^\s*#\s+") {
                $inCompletedBlock = $false
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –±–ª–æ–∫–∞
                continue
            }
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–ª–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            continue
        }
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        if ($line -match "^\s*-\s*[‚úÖx]\s+" -or $line -match "^\s*-\s*‚úÖ\s+") {
            $skipNext = $true
            continue
        }
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if ($skipNext -and $line -match "^\s{2,}-") {
            continue
        }
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        if ($line -match "^\s*-\s*\[[^x]\]") {
            $skipNext = $false
        }
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if ($line -match "^\s*#|^\s*$|^\s*---") {
            $skipNext = $false
        }
        
        $newLines += $line
    }
    
    return ($newLines -join "`n")
}

function Add-CompletedTasks {
    param([string]$CompletedContent, [array]$CompletedTasks, [string]$SourceFile)
    
    if ($CompletedTasks.Count -eq 0) {
        return $CompletedContent
    }
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $migrationHeader = @"

## üöÄ **AUTOMATIC TASK MIGRATION** ‚úÖ COMPLETED

### üìÖ **Migration Date**: $timestamp
### üìÅ **Source**: $SourceFile
### üéØ **Migrated Tasks**: $($CompletedTasks.Count) completed tasks

#### ‚úÖ **Migrated Completed Tasks**
"@
    
    $migratedTasks = @()
    foreach ($task in $CompletedTasks) {
        $migratedTasks += "- [x] $task"
    }
    
    $migrationContent = $migrationHeader + "`n" + ($migratedTasks -join "`n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if ($CompletedContent -match "^(# .+?)(\n\n)") {
        return $CompletedContent -replace "^(# .+?)(\n\n)", "`$1`$2$migrationContent`n`n"
    } else {
        return $migrationContent + "`n`n" + $CompletedContent
    }
}

function Process-TodoFile {
    param(
        [string]$TodoPath,
        [string]$CompletedPath,
        [string]$Description
    )
    
    Write-Log "Processing $Description files..." "INFO"
    
    if (-not (Test-FileExists $TodoPath)) {
        Write-Log "TODO file not found: $TodoPath" "WARN"
        return $false
    }
    
    if (-not (Test-FileExists $CompletedPath)) {
        Write-Log "Completed file not found: $CompletedPath" "WARN"
        return $false
    }
    
    try {
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        $todoContent = Get-Content -Path $TodoPath -Raw -Encoding UTF8
        $completedContent = Get-Content -Path $CompletedPath -Raw -Encoding UTF8
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        $completedTasks = Get-CompletedTasks -TodoContent $todoContent
        
        if ($completedTasks.Count -eq 0) {
            Write-Log "No completed tasks found in $TodoPath" "INFO"
            return $true
        }
        
        Write-Log "Found $($completedTasks.Count) completed tasks in $TodoPath" "INFO"
        
        if ($DryRun) {
            Write-Log "DRY RUN: Would migrate $($completedTasks.Count) tasks from $TodoPath to $CompletedPath" "INFO"
            foreach ($task in $completedTasks) {
                Write-Log "  - $task" "INFO"
            }
            return $true
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        $todoBackup = $TodoPath + ".backup." + (Get-Date -Format "yyyyMMdd-HHmmss")
        $completedBackup = $CompletedPath + ".backup." + (Get-Date -Format "yyyyMMdd-HHmmss")
        
        Copy-Item -Path $TodoPath -Destination $todoBackup
        Copy-Item -Path $CompletedPath -Destination $completedBackup
        
        Write-Log "Created backups: $todoBackup, $completedBackup" "INFO"
        
        # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ TODO
        $newTodoContent = Remove-CompletedTasks -TodoContent $todoContent
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ Completed
        $newCompletedContent = Add-CompletedTasks -CompletedContent $completedContent -CompletedTasks $completedTasks -SourceFile $TodoPath
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        Set-Content -Path $TodoPath -Value $newTodoContent -Encoding UTF8
        Set-Content -Path $CompletedPath -Value $newCompletedContent -Encoding UTF8
        
        Write-Log "Successfully migrated $($completedTasks.Count) tasks from $TodoPath to $CompletedPath" "SUCCESS"
        return $true
        
    } catch {
        Write-Log "Error processing $Description files: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

Write-Log "Starting Task Migration Script" "INFO"
Write-Log "Project Path: $ProjectPath" "INFO"
Write-Log "Dry Run: $DryRun" "INFO"

$success = $true

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
$rootTodoPath = Join-Path $ProjectPath "TODO.md"
$rootCompletedPath = Join-Path $ProjectPath "COMPLETED.md"

if ((Test-FileExists $rootTodoPath) -and (Test-FileExists $rootCompletedPath)) {
    $result = Process-TodoFile -TodoPath $rootTodoPath -CompletedPath $rootCompletedPath -Description "Root"
    $success = $success -and $result
}

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ .manager/control-files/
$managerTodoPath = Join-Path $ProjectPath ".manager/control-files/TODO.md"
$managerCompletedPath = Join-Path $ProjectPath ".manager/control-files/COMPLETED.md"

if ((Test-FileExists $managerTodoPath) -and (Test-FileExists $managerCompletedPath)) {
    $result = Process-TodoFile -TodoPath $managerTodoPath -CompletedPath $managerCompletedPath -Description "Manager"
    $success = $success -and $result
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ .manager/TODO.md –∏ .manager/Completed.md (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏)
$altManagerTodoPath = Join-Path $ProjectPath ".manager/TODO.md"
$altManagerCompletedPath = Join-Path $ProjectPath ".manager/Completed.md"

if ((Test-FileExists $altManagerTodoPath) -and (Test-FileExists $altManagerCompletedPath)) {
    $result = Process-TodoFile -TodoPath $altManagerTodoPath -CompletedPath $altManagerCompletedPath -Description "Manager (Alternative)"
    $success = $success -and $result
}

if ($success) {
    Write-Log "Task migration completed successfully!" "SUCCESS"
    exit 0
} else {
    Write-Log "Task migration completed with errors. Check log file: $LogFile" "ERROR"
    exit 1
}
