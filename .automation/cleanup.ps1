# .automation/cleanup.ps1
# –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º

param(
    [switch]$WhatIf = $false,
    [switch]$Verbose = $false
)

Write-Host "üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Cyan

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
$folders = @(
    "tests",
    ".manager/Completed", 
    "yml",
    "config",
    "setup",
    "test"
)

foreach ($folder in $folders) {
    if (!(Test-Path $folder)) {
        Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏: $folder" -ForegroundColor Yellow
        if (!$WhatIf) {
            New-Item -ItemType Directory -Path $folder -Force | Out-Null
        }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function Move-Files {
    param(
        [string]$Pattern,
        [string]$Destination,
        [string]$Description
    )
    
    $files = Get-ChildItem -Path "." -Filter $Pattern -Recurse -File | Where-Object { $_.DirectoryName -notlike "*$Destination*" }
    
    if ($files.Count -gt 0) {
        Write-Host "üì¶ $Description ($($files.Count) —Ñ–∞–π–ª–æ–≤)" -ForegroundColor Green
        
        foreach ($file in $files) {
            $destPath = Join-Path $Destination $file.Name
            
            if ($Verbose) {
                Write-Host "  $($file.FullName) ‚Üí $destPath" -ForegroundColor Gray
            }
            
            if (!$WhatIf) {
                try {
                    Move-Item -Path $file.FullName -Destination $destPath -Force
                }
                catch {
                    Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å $($file.Name): $($_.Exception.Message)"
                }
            }
        }
    }
}

# 1. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö Python —Ñ–∞–π–ª–æ–≤
Move-Files -Pattern "test_*.py" -Destination "tests" -Description "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö Python —Ñ–∞–π–ª–æ–≤"

# 2. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ MD —Ñ–∞–π–ª–æ–≤ (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
$excludeMd = @("STATUS.md", "TODO.md", "IDEA.md", "README.md", "readme.md", "Readme.md")
$mdFiles = Get-ChildItem -Path "." -Filter "*.md" -Recurse -File | Where-Object { 
    $_.Name -notin $excludeMd -and $_.DirectoryName -notlike "*\.manager\Completed*" 
}

if ($mdFiles.Count -gt 0) {
    Write-Host "üìÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ MD —Ñ–∞–π–ª–æ–≤ ($($mdFiles.Count) —Ñ–∞–π–ª–æ–≤)" -ForegroundColor Green
    
    foreach ($file in $mdFiles) {
        $destPath = Join-Path ".manager/Completed" $file.Name
        
        if ($Verbose) {
            Write-Host "  $($file.FullName) ‚Üí $destPath" -ForegroundColor Gray
        }
        
        if (!$WhatIf) {
            try {
                Move-Item -Path $file.FullName -Destination $destPath -Force
            }
            catch {
                Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å $($file.Name): $($_.Exception.Message)"
            }
        }
    }
}

# 3. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ YAML —Ñ–∞–π–ª–æ–≤
Move-Files -Pattern "*.yml" -Destination "yml" -Description "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ YAML —Ñ–∞–π–ª–æ–≤"

# 4. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö JSON —Ñ–∞–π–ª–æ–≤
Move-Files -Pattern "*config*.json" -Destination "config" -Description "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö JSON —Ñ–∞–π–ª–æ–≤"

# 5. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ setup —Ñ–∞–π–ª–æ–≤
Move-Files -Pattern "setup*.py" -Destination "setup" -Description "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ setup Python —Ñ–∞–π–ª–æ–≤"

# 6. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
Move-Files -Pattern "test*.db" -Destination "test" -Description "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"

# 7. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ run —Ñ–∞–π–ª–æ–≤
Move-Files -Pattern "run*.py" -Destination "run" -Description "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ run Python —Ñ–∞–π–ª–æ–≤"

# –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫
Write-Host "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫..." -ForegroundColor Yellow
$emptyFolders = Get-ChildItem -Path "." -Directory -Recurse | Where-Object { 
    (Get-ChildItem $_.FullName -Force | Measure-Object).Count -eq 0 -and 
    $_.Name -notin @(".git", ".vscode", ".idea", "node_modules", "__pycache__", ".pytest_cache")
}

foreach ($folder in $emptyFolders) {
    if ($Verbose) {
        Write-Host "  –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏: $($folder.FullName)" -ForegroundColor Gray
    }
    
    if (!$WhatIf) {
        try {
            Remove-Item -Path $folder.FullName -Force
        }
        catch {
            Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É $($folder.Name): $($_.Exception.Message)"
        }
    }
}

if ($WhatIf) {
    Write-Host "‚úÖ –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω" -ForegroundColor Green
} else {
    Write-Host "‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
}

Write-Host "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" -ForegroundColor Cyan
Write-Host "  - –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: $($folders.Count)" -ForegroundColor White
Write-Host "  - MD —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: $($mdFiles.Count)" -ForegroundColor White
Write-Host "  - –ü—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫ —É–¥–∞–ª–µ–Ω–æ: $($emptyFolders.Count)" -ForegroundColor White
