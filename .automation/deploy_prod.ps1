# .automation/deploy_prod.ps1
# –°–∫—Ä–∏–ø—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-–¥–µ–ø–ª–æ—è

param(
    [string]$ProjectName = "ManagerAgentAI",
    [string]$OutputDir = "dist",
    [string]$Version = "",
    [switch]$WhatIf = $false,
    [switch]$Verbose = $false
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ git –∏–ª–∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
if ([string]::IsNullOrEmpty($Version)) {
    try {
        $gitVersion = git describe --tags --always 2>$null
        if ($LASTEXITCODE -eq 0) {
            $Version = $gitVersion
        } else {
            $Version = Get-Date -Format "yyyyMMdd-HHmmss"
        }
    }
    catch {
        $Version = Get-Date -Format "yyyyMMdd-HHmmss"
    }
}

Write-Host "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-–¥–µ–ø–ª–æ—è..." -ForegroundColor Cyan
Write-Host "  –ü—Ä–æ–µ–∫—Ç: $ProjectName" -ForegroundColor White
Write-Host "  –í–µ—Ä—Å–∏—è: $Version" -ForegroundColor White
Write-Host "  –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $OutputDir" -ForegroundColor White

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
if (!(Test-Path $OutputDir)) {
    Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏: $OutputDir" -ForegroundColor Yellow
    if (!$WhatIf) {
        New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
    }
}

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç .deployignore)
$excludePatterns = @(
    ".automation",
    ".manager",
    ".vscode",
    ".idea",
    ".vs",
    ".git",
    "node_modules",
    "__pycache__",
    ".pytest_cache",
    ".venv",
    "venv",
    "env",
    ".env",
    "*.log",
    "*.tmp",
    "*.temp",
    "*.swp",
    "*.swo",
    "*~",
    ".DS_Store",
    "Thumbs.db",
    "desktop.ini",
    "dist",
    "build",
    "bin",
    "obj",
    "out",
    "target",
    "coverage",
    "*.sln",
    "*.suo",
    "*.user",
    "*.sp1",
    "test*.db",
    "*.test",
    "*.spec",
    "tests",
    "__tests__",
    "test",
    "spec",
    ".env.local",
    ".env.development",
    ".env.test",
    "*.local",
    "*.dev",
    "*.debug",
    "logs",
    "reports",
    "*.bak",
    "*.backup",
    "*.old",
    "*.orig",
    "*.rej",
    "*.zip",
    "*.tar",
    "*.tar.gz",
    "*.rar",
    "*.7z"
)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
function Test-ShouldExclude {
    param([string]$Path)
    
    foreach ($pattern in $excludePatterns) {
        if ($Path -like "*$pattern*") {
            return $true
        }
    }
    return $false
}

# –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
Write-Host "üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è..." -ForegroundColor Yellow
$filesToArchive = @()

Get-ChildItem -Path "." -Recurse -File | ForEach-Object {
    $relativePath = $_.FullName.Substring((Get-Location).Path.Length + 1)
    
    if (!(Test-ShouldExclude $relativePath)) {
        $filesToArchive += $_
        
        if ($Verbose) {
            Write-Host "  ‚úÖ $relativePath" -ForegroundColor Green
        }
    } else {
        if ($Verbose) {
            Write-Host "  ‚ùå $relativePath" -ForegroundColor Red
        }
    }
}

Write-Host "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: $($filesToArchive.Count)" -ForegroundColor Cyan

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
$tempDir = Join-Path $env:TEMP "deploy_$ProjectName"
if (Test-Path $tempDir) {
    Remove-Item -Path $tempDir -Recurse -Force
}

if (!$WhatIf) {
    New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    Write-Host "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..." -ForegroundColor Yellow
    foreach ($file in $filesToArchive) {
        $relativePath = $file.FullName.Substring((Get-Location).Path.Length + 1)
        $destPath = Join-Path $tempDir $relativePath
        $destDir = Split-Path $destPath -Parent
        
        if (!(Test-Path $destDir)) {
            New-Item -ItemType Directory -Path $destDir -Force | Out-Null
        }
        
        Copy-Item -Path $file.FullName -Destination $destPath -Force
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    $archiveName = "${ProjectName}_v${Version}_prod.zip"
    $archivePath = Join-Path $OutputDir $archiveName
    
    Write-Host "üóúÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: $archiveName" -ForegroundColor Yellow
    
    try {
        Compress-Archive -Path "$tempDir\*" -DestinationPath $archivePath -Force
        Write-Host "‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: $archivePath" -ForegroundColor Green
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∞—Ä—Ö–∏–≤–∞
        $archiveSize = (Get-Item $archivePath).Length
        $archiveSizeMB = [math]::Round($archiveSize / 1MB, 2)
        Write-Host "üìè –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: $archiveSizeMB MB" -ForegroundColor Cyan
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        $manifestPath = Join-Path $OutputDir "${ProjectName}_v${Version}_manifest.txt"
        $manifest = @"
–ê—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞: $ProjectName
–í–µ—Ä—Å–∏—è: $Version
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: $archiveSizeMB MB
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $($filesToArchive.Count)

–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:
$(($excludePatterns | ForEach-Object { "  - $_" }) -join "`n")

–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
$(($filesToArchive | ForEach-Object { "  - $($_.FullName.Substring((Get-Location).Path.Length + 1))" }) -join "`n")
"@
        
        $manifest | Out-File -FilePath $manifestPath -Encoding UTF8
        Write-Host "üìÑ –°–æ–∑–¥–∞–Ω –º–∞–Ω–∏—Ñ–µ—Å—Ç: $manifestPath" -ForegroundColor Green
        
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: $($_.Exception.Message)"
        exit 1
    }
    finally {
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
        if (Test-Path $tempDir) {
            Remove-Item -Path $tempDir -Recurse -Force
        }
    }
} else {
    Write-Host "‚úÖ –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω" -ForegroundColor Green
}

Write-Host "`nüéâ –ü—Ä–æ—Ü–µ—Å—Å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!" -ForegroundColor Green
Write-Host "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $OutputDir" -ForegroundColor Cyan

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
if (!$WhatIf) {
    Write-Host "`nüöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á..." -ForegroundColor Yellow
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:
    # - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # - –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    # - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è
    
    Start-Job -ScriptBlock {
        Start-Sleep -Seconds 2
        Write-Host "‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã" -ForegroundColor Green
    } | Out-Null
}
