# Universal Automation Manager v3.2
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å AI, Quantum, Enterprise –∏ UI/UX –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏

param(
    [string]$Action = "help",
    [string]$ProjectPath = ".",
    [string]$ProjectType = "auto",
    [switch]$EnableAI,
    [switch]$EnableQuantum,
    [switch]$EnableEnterprise,
    [switch]$EnableUIUX,
    [switch]$Verbose,
    [switch]$Force,
    [string]$ConfigFile = ""
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Info = "Cyan"
    Header = "Magenta"
    AI = "Blue"
    Quantum = "Magenta"
    Enterprise = "DarkCyan"
    UIUX = "DarkYellow"
}

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Show-Help {
    Write-ColorOutput "`nü§ñ Universal Automation Manager v3.2" -Color $Colors.Header
    Write-ColorOutput "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å AI, Quantum, Enterprise –∏ UI/UX –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏" -Color $Colors.Info
    Write-ColorOutput "`nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:" -Color $Colors.Header
    Write-ColorOutput "  scan          - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  analyze       - AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  build         - –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  test          - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  deploy        - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  optimize      - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  monitor       - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  setup         - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  clean         - –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞" -Color $Colors.Info
    Write-ColorOutput "  uiux          - UI/UX –∞–Ω–∞–ª–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" -Color $Colors.UIUX
    Write-ColorOutput "  help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É" -Color $Colors.Info
    Write-ColorOutput "`nüîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:" -Color $Colors.Header
    Write-ColorOutput "  -Action       - –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" -Color $Colors.Info
    Write-ColorOutput "  -ProjectPath  - –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .)" -Color $Colors.Info
    Write-ColorOutput "  -ProjectType  - –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)" -Color $Colors.Info
    Write-ColorOutput "  -EnableAI     - –í–∫–ª—é—á–∏—Ç—å AI —Ñ—É–Ω–∫—Ü–∏–∏" -Color $Colors.AI
    Write-ColorOutput "  -EnableQuantum - –í–∫–ª—é—á–∏—Ç—å Quantum —Ñ—É–Ω–∫—Ü–∏–∏" -Color $Colors.Quantum
    Write-ColorOutput "  -EnableEnterprise - –í–∫–ª—é—á–∏—Ç—å Enterprise —Ñ—É–Ω–∫—Ü–∏–∏" -Color $Colors.Enterprise
    Write-ColorOutput "  -EnableUIUX   - –í–∫–ª—é—á–∏—Ç—å UI/UX —Ñ—É–Ω–∫—Ü–∏–∏" -Color $Colors.UIUX
    Write-ColorOutput "  -Verbose      - –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥" -Color $Colors.Info
    Write-ColorOutput "  -Force        - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" -Color $Colors.Warning
    Write-ColorOutput "  -ConfigFile   - –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" -Color $Colors.Info
    Write-ColorOutput "`nüöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:" -Color $Colors.Header
    Write-ColorOutput "  .\Universal-Automation-Manager-v3.2.ps1 -Action scan -EnableAI -EnableQuantum" -Color $Colors.Info
    Write-ColorOutput "  .\Universal-Automation-Manager-v3.2.ps1 -Action build -ProjectType nodejs -EnableAI" -Color $Colors.Info
    Write-ColorOutput "  .\Universal-Automation-Manager-v3.2.ps1 -Action uiux -EnableUIUX -GenerateWireframes" -Color $Colors.UIUX
}

function Initialize-Manager {
    Write-ColorOutput "`nü§ñ Universal Automation Manager v3.2" -Color $Colors.Header
    Write-ColorOutput "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏..." -Color $Colors.Info
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    if (!(Test-Path $ProjectPath)) {
        Write-ColorOutput "‚ùå –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $ProjectPath" -Color $Colors.Error
        exit 1
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
    $logPath = "$ProjectPath/.automation/logs"
    if (!(Test-Path $logPath)) {
        New-Item -ItemType Directory -Path $logPath -Force | Out-Null
    }
    
    Write-ColorOutput "‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" -Color $Colors.Success
}

function Invoke-ProjectScan {
    Write-ColorOutput "`nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.Header
    
    $scannerPath = "$PSScriptRoot/Project-Scanner-Enhanced-v3.2.ps1"
    if (Test-Path $scannerPath) {
        $params = @{
            ProjectPath = $ProjectPath
            EnableAI = $EnableAI
            EnableQuantum = $EnableQuantum
            EnableEnterprise = $EnableEnterprise
            EnableUIUX = $EnableUIUX
            GenerateReport = $true
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $scannerPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è –°–∫–∞–Ω–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $scannerPath" -Color $Colors.Warning
    }
}

function Invoke-ProjectAnalysis {
    Write-ColorOutput "`nüß† AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.AI
    
    $analyzerPath = "$PSScriptRoot/ai-analysis/AI-Enhanced-Project-Analyzer.ps1"
    if (Test-Path $analyzerPath) {
        $params = @{
            ProjectPath = $ProjectPath
            AnalysisType = "comprehensive"
            EnableAI = $true
            GenerateReport = $true
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $analyzerPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: $analyzerPath" -Color $Colors.Warning
    }
}

function Invoke-ProjectBuild {
    Write-ColorOutput "`nüî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.Header
    
    $buildPath = "$PSScriptRoot/build/universal_build.ps1"
    if (Test-Path $buildPath) {
        $params = @{
            ProjectPath = $ProjectPath
            ProjectType = $ProjectType
            EnableAI = $EnableAI
            EnableOptimization = $true
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $buildPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è –°–±–æ—Ä—â–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $buildPath" -Color $Colors.Warning
    }
}

function Invoke-ProjectTest {
    Write-ColorOutput "`nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.Header
    
    $testPath = "$PSScriptRoot/testing/universal_tests.ps1"
    if (Test-Path $testPath) {
        $params = @{
            ProjectPath = $ProjectPath
            ProjectType = $ProjectType
            All = $true
            Coverage = $true
            EnableAI = $EnableAI
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $testPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è –¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $testPath" -Color $Colors.Warning
    }
}

function Invoke-ProjectDeploy {
    Write-ColorOutput "`nüöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.Header
    
    $deployPath = "$PSScriptRoot/deployment/deploy_automation.ps1"
    if (Test-Path $deployPath) {
        $params = @{
            ProjectPath = $ProjectPath
            ProjectType = $ProjectType
            CreatePackage = $true
            Docker = $true
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $deployPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $deployPath" -Color $Colors.Warning
    }
}

function Invoke-ProjectOptimization {
    Write-ColorOutput "`n‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.Header
    
    $optimizerPath = "$PSScriptRoot/ai-analysis/AI-Project-Optimizer.ps1"
    if (Test-Path $optimizerPath) {
        $params = @{
            ProjectPath = $ProjectPath
            OptimizationLevel = "balanced"
            EnableAI = $EnableAI
            EnablePredictiveAnalytics = $true
            GenerateReport = $true
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $optimizerPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $optimizerPath" -Color $Colors.Warning
    }
}

function Invoke-ProjectMonitoring {
    Write-ColorOutput "`nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.Header
    
    $monitorPath = "$PSScriptRoot/utilities/universal-status-check.ps1"
    if (Test-Path $monitorPath) {
        $params = @{
            ProjectPath = $ProjectPath
            All = $true
            Health = $true
            Performance = $true
            Security = $true
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $monitorPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $monitorPath" -Color $Colors.Warning
    }
}

function Invoke-ProjectSetup {
    Write-ColorOutput "`n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.Header
    
    $setupPath = "$PSScriptRoot/installation/universal_setup.ps1"
    if (Test-Path $setupPath) {
        $params = @{
            ProjectPath = $ProjectPath
            ProjectType = $ProjectType
            EnableAI = $EnableAI
            EnableQuantum = $EnableQuantum
            EnableEnterprise = $EnableEnterprise
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $setupPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—â–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $setupPath" -Color $Colors.Warning
    }
}

function Invoke-ProjectClean {
    Write-ColorOutput "`nüßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -Color $Colors.Header
    
    $cleanPath = "$PSScriptRoot/utilities/clean-project.ps1"
    if (Test-Path $cleanPath) {
        $params = @{
            ProjectPath = $ProjectPath
            RemoveBuild = $true
            RemoveLogs = $true
            RemoveTemp = $true
        }
        
        if ($Verbose) { $params.Verbose = $true }
        if ($Force) { $params.Force = $true }
        
        & $cleanPath @params
    } else {
        Write-ColorOutput "‚ö†Ô∏è –û—á–∏—Å—Ç–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $cleanPath" -Color $Colors.Warning
    }
}

function Invoke-UIUXAnalysis {
    Write-ColorOutput "`nüé® UI/UX –∞–Ω–∞–ª–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è..." -Color $Colors.UIUX
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è UI/UX —Å–∫—Ä–∏–ø—Ç–æ–≤
    $uiuxScripts = @(
        "$PSScriptRoot/ui-ux/wireframe-generator.ps1",
        "$PSScriptRoot/ui-ux/html-interface-generator.ps1",
        "$PSScriptRoot/ui-ux/design-system-manager.ps1"
    )
    
    $availableScripts = $uiuxScripts | Where-Object { Test-Path $_ }
    
    if ($availableScripts.Count -eq 0) {
        Write-ColorOutput "‚ö†Ô∏è UI/UX —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" -Color $Colors.Warning
        Write-ColorOutput "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö UI/UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..." -Color $Colors.Info
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö UI/UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        Create-BasicUIUXComponents
    } else {
        foreach ($script in $availableScripts) {
            Write-ColorOutput "–ó–∞–ø—É—Å–∫: $($script | Split-Path -Leaf)" -Color $Colors.Info
            & $script -ProjectPath $ProjectPath -EnableUIUX
        }
    }
}

function Create-BasicUIUXComponents {
    Write-ColorOutput "`nüé® –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö UI/UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..." -Color $Colors.UIUX
    
    $uiuxPath = "$ProjectPath/ui-ux"
    if (!(Test-Path $uiuxPath)) {
        New-Item -ItemType Directory -Path $uiuxPath -Force | Out-Null
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö wireframes
    $wireframesPath = "$uiuxPath/wireframes"
    if (!(Test-Path $wireframesPath)) {
        New-Item -ItemType Directory -Path $wireframesPath -Force | Out-Null
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    $interfacesPath = "$uiuxPath/interfaces"
    if (!(Test-Path $interfacesPath)) {
        New-Item -ItemType Directory -Path $interfacesPath -Force | Out-Null
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    $htmlContent = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Universal Project Manager v3.2</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; }
        .features { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .feature { padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
        .feature h3 { color: #333; margin-top: 0; }
        .status { display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
        .status.enabled { background: #d4edda; color: #155724; }
        .status.disabled { background: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Universal Project Manager v3.2</h1>
            <p>Advanced AI & Enterprise Integration Enhanced</p>
        </div>
        
        <div class="features">
            <div class="feature">
                <h3>üß† AI Features</h3>
                <p>Advanced AI processing, machine learning, and intelligent automation</p>
                <span class="status enabled">Enabled</span>
            </div>
            
            <div class="feature">
                <h3>‚öõÔ∏è Quantum Computing</h3>
                <p>Quantum machine learning and optimization algorithms</p>
                <span class="status enabled">Enabled</span>
            </div>
            
            <div class="feature">
                <h3>üè¢ Enterprise Integration</h3>
                <p>Enterprise-grade security, compliance, and scalability</p>
                <span class="status enabled">Enabled</span>
            </div>
            
            <div class="feature">
                <h3>üé® UI/UX Design</h3>
                <p>Comprehensive wireframes and HTML interfaces</p>
                <span class="status enabled">Enabled</span>
            </div>
        </div>
    </div>
</body>
</html>
"@
    
    $htmlPath = "$interfacesPath/main-dashboard.html"
    $htmlContent | Out-File -FilePath $htmlPath -Encoding UTF8
    
    Write-ColorOutput "‚úÖ –ë–∞–∑–æ–≤—ã–µ UI/UX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã" -Color $Colors.Success
    Write-ColorOutput "  üìÅ Wireframes: $wireframesPath" -Color $Colors.Info
    Write-ColorOutput "  üìÅ Interfaces: $interfacesPath" -Color $Colors.Info
    Write-ColorOutput "  üìÑ Main Dashboard: $htmlPath" -Color $Colors.Info
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
try {
    Initialize-Manager
    
    switch ($Action.ToLower()) {
        "scan" { Invoke-ProjectScan }
        "analyze" { Invoke-ProjectAnalysis }
        "build" { Invoke-ProjectBuild }
        "test" { Invoke-ProjectTest }
        "deploy" { Invoke-ProjectDeploy }
        "optimize" { Invoke-ProjectOptimization }
        "monitor" { Invoke-ProjectMonitoring }
        "setup" { Invoke-ProjectSetup }
        "clean" { Invoke-ProjectClean }
        "uiux" { Invoke-UIUXAnalysis }
        "help" { Show-Help }
        default {
            Write-ColorOutput "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $Action" -Color $Colors.Error
            Show-Help
            exit 1
        }
    }
    
    Write-ColorOutput "`n‚úÖ –î–µ–π—Å—Ç–≤–∏–µ '$Action' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" -Color $Colors.Success
}
catch {
    Write-ColorOutput "`n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è '$Action': $($_.Exception.Message)" -Color $Colors.Error
    exit 1
}
